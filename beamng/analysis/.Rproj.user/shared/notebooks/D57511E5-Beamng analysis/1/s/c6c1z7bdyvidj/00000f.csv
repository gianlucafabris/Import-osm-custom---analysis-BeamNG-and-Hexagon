"0","reticulate::repl_python()"
"0","#TODO rifare catmullrom"
"0",""
"0","import numpy as np"
"0","import math"
"0","import matplotlib.pyplot as plt"
"0",""
"0","def catmull_rom_one_point(P0, P1, P2, P3, res = 100, alpha = 0.0):"
"0","    """""""
"0","    Computes interpolated y-coord for given x-coord using Catmull-Rom."
"0","    Computes an interpolated y-coordinate for the given x-coordinate between"
"0","    the support points P1 and P2. The neighboring support points P0 and P3 are"
"0","    used by Catmull-Rom to ensure a smooth transition between the spline"
"0","    segments."
"0","    This version works both with in x and y direction."
"0","    Args:"
"0","        P0: 1st support point"
"0","        P1: 2nd support point"
"0","        P2: 3rd support point"
"0","        P3: 4th support point"
"0","        res: resolution of a segment (including the start point, but not the endpoint of the segment)"
"0","        alpha: 0.0 uniform, 0.5 centripetal, 1.0 chordal"
"0","    Returns:"
"0","        y: value of y (given x) in that derivative"
"0","    """""""
"0","    def compute_tk(ti, pi, pj):"
"0","        return ti + (math.sqrt((pj[0] - pi[0])**2 + (pj[1] - pi[1])**2))**alpha"
"0","        "
"0","    t0 = 0.0"
"0","    t1 = compute_tk(t0, P0, P1)"
"0","    t2 = compute_tk(t1, P1, P2)"
"0","    t3 = compute_tk(t2, P2, P3)"
"0","    "
"0","    t = np.linspace(t1, t2, res, endpoint=False).reshape(res, 1)"
"0","    "
"0","    A1 = (t1 - t) / (t1 - t0) * P0 + (t - t0) / (t1 - t0) * P1"
"0","    A2 = (t2 - t) / (t2 - t1) * P1 + (t - t1) / (t2 - t1) * P2"
"0","    A3 = (t3 - t) / (t3 - t2) * P2 + (t - t2) / (t3 - t2) * P3"
"0","    B1 = (t2 - t) / (t2 - t0) * A1 + (t - t0) / (t2 - t0) * A2"
"0","    B2 = (t3 - t) / (t3 - t1) * A2 + (t - t1) / (t3 - t1) * A3"
"0","    "
"0","    points = (t2 - t) / (t2 - t1) * B1 + (t - t1) / (t2 - t1) * B2"
"0","    return points"
"0","    "
"0","def catmull_rom(points, res=100):"
"0","    """""""
"0","    Computes Catmull-Rom Spline for given support points and resolution."
"0","    Args:"
"0","        p: array of (x,y)-coords"
"0","        res: resolution of a segment (including the start point, but not the endpoint of the segment)"
"0","    Returns:"
"0","        (x,y): array"
"0","    """""""
"0","    point_quadruples = []"
"0","    for i in range(len(points)-1):"
"0","        if i == 0:"
"0","            # need to estimate an additional support point before the first"
"0","            point_quadruples.append([(points[0][0] - (points[1][0] - points[0][0]), points[0][1] - (points[1][1] - points[0][1])), (points[0][0], points[0][1]), (points[1][0], points[1][1]), (points[2][0], points[2][1])])"
"0","        elif i == len(points) - 2:"
"0","            # need to estimate an additional support point after the last"
"0","            point_quadruples.append([points[i-1], points[i], points[i+1], (points[i+1][0] + (points[i+1][0] - points[i][0]), points[i+1][1] + (points[i+1][1] - points[i][1]))])"
"0","        else:"
"0","            point_quadruples.append([points[i-1], points[i], points[i+1], points[i+2]])"
"0","    return np.concatenate([catmull_rom_one_point(*pq, res) for pq in point_quadruples])"
"0","    "
"0","def visualizeCatmullrom(p):"
"0","    res = 100"
"0","    p_interpolated = catmull_rom(p, res)"
"0","    p = np.array(p)"
"0","    pmin = np.min(p) - 5"
"0","    pmax = np.max(p) + 5"
"0","    plt.figure(figsize=(10, 10))"
"0","    plt.plot(p_interpolated[:, 0], p_interpolated[:, 1])"
"0","    plt.scatter(p[:, 0], p[:, 1], color='black')"
"0","    plt.xlabel('X')"
"0","    plt.ylabel('Y')"
"0","    plt.xlim([pmin, pmax])"
"0","    plt.ylim([pmin, pmax])"
"0","    plt.grid(True)"
"0","    plt.show()"
"0","    "
"0","visualizeCatmullrom(np.array([(0, 0), (1, 1), (2, 0), (3, -1), (4, 0)]))"
"0",""
"0",""
